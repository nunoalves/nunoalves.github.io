<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOS on ohNoNuNo</title>
    <link>http://localhost:1313/tags/dos/</link>
    <description>Recent content in DOS on ohNoNuNo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jun 2025 08:02:19 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/dos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Freedos 1.4 on Ubuntu 24.04</title>
      <link>http://localhost:1313/posts/installing-freedos-1.4/</link>
      <pubDate>Wed, 11 Jun 2025 08:02:19 -0400</pubDate>
      <guid>http://localhost:1313/posts/installing-freedos-1.4/</guid>
      <description>&lt;p&gt;About a week ago, I came across &lt;a href=&#34;https://hackaday.com/2025/05/29/bring-back-the-bios-to-uefi-systems-that-is/&#34;&gt;this Hackaday post&lt;/a&gt; about a &lt;a href=&#34;https://github.com/FlyGoat/csmwrap&#34;&gt;UEFI-wrapper project&lt;/a&gt; that re-enables legacy BIOS on UEFI-only systems. Coincidentally, FreeDOS v1.4 was just released, so I decided to repurpose an old laptop as a pure FreeDOS machine. Because DOS requires a BIOS runtime (no native UEFI support), most modern machines can’t run it natively.&lt;/p&gt;&#xA;&lt;p&gt;I tried CSMwrap on my janky laptop, but things didn’t quite work. Since I mainly wanted to try FreeDOS rather than dive into a UEFI rabbit hole, I opted to run FreeDOS inside QEMU on Ubuntu 24.04 LTS. Below are the exact steps—including FAT16 partitioning, QEMU command-line options, and networking tweaks&amp;hellip; Mainly, so I won’t forget what I did.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decoding and Decompressing PM2’s Background Images</title>
      <link>http://localhost:1313/posts/pm2-image-extraction-part-2/</link>
      <pubDate>Wed, 21 May 2025 23:02:19 -0400</pubDate>
      <guid>http://localhost:1313/posts/pm2-image-extraction-part-2/</guid>
      <description>&lt;p&gt;So! This is it. After slacking off for a while, I think I’m ready to reverse engineer the Premier Manager 2 (PM2) image compression format for the background (&lt;code&gt;.gnd&lt;/code&gt;) files. A year or so ago, I worked on the &lt;code&gt;.vga&lt;/code&gt; files, so now it’s time to try decoding the &lt;code&gt;.gnd&lt;/code&gt; files. I haven’t touched this in a while, so I’m not sure how far I got last time. Without further ado, let’s start!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reverse-Engineering Premier Manager 2’s VGA Graphics</title>
      <link>http://localhost:1313/posts/pm2-image-extraction-part-1/</link>
      <pubDate>Sat, 20 Apr 2024 14:30:00 -0400</pubDate>
      <guid>http://localhost:1313/posts/pm2-image-extraction-part-1/</guid>
      <description>&lt;p&gt;About once every five years I fire up &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Premier_Manager_2&#34;&gt;Premier Manager 2&lt;/a&gt;&lt;/em&gt; — THE soccer management game before &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Championship_Manager_93/94&#34;&gt;Championship Manager&lt;/a&gt;&lt;/em&gt; monopolised the genre. (These days, you can even play &lt;a href=&#34;https://archive.org/details/msdos_Premier_Manager_2_1993&#34;&gt;PM2 in your browser&lt;/a&gt;.)&lt;/p&gt;&#xA;&lt;p&gt;Before starting to play, this time I noticed an interesting mix of files in the root directory — thingslike &lt;code&gt;contract.gnd&lt;/code&gt;, &lt;code&gt;icons.vga&lt;/code&gt;, &lt;code&gt;anim.bin&lt;/code&gt;, &lt;code&gt;goal.voc&lt;/code&gt;, and others—and wondered how hard it would be to decode them with modern tooling. Surely the &lt;code&gt;.gnd&lt;/code&gt; and &lt;code&gt;.vga&lt;/code&gt; files were graphic assets, the &lt;code&gt;.voc&lt;/code&gt; files audio, and so on. A little reverse‑engineering later, here’s what I found about the image formats&amp;hellip;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
